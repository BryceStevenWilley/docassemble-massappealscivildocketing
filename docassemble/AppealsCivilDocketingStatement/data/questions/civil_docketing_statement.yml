include:
  - docassemble.AssemblyLine:al_package.yml
  - docassemble.MassAccess:massaccess.yml
  - docassemble.MassAppealsCourt:appeals-basic-questions.yml
---
comment: |
  This section is used by MAVirtualCourts to control how some of the questions work.
mandatory: True
code: |
  interview_metadata # make sure we initialize the object
  if not defined("interview_metadata['civil_docketing_statement']"):
    interview_metadata.initializeObject('civil_docketing_statement')
  interview_metadata['civil_docketing_statement'].update({
    'title': 'Civil Docketing Statement',
    'short title': 'Civil Docketing',
    'description': 'Use this form to fill out an Appeals Court Civil Docketing Statement, required for many other Appeals Court forms',
    'original_form': 'https://www.mass.gov/doc/civil-docketing-statement-updated-10-28-19/download',
    'allowed courts': [
    ],
    'categories': [
    ],
    'logic block variable': 'civil_docketing_statement',
    'attachment block variable': 'civil_docketing_statement_attachment',
    'typical role': 'unknown',
  })
---
objects:
  - judges: |
      DAList.using(object_type=Individual)
---
sections:
  - review_civil_docketing_statement: Review your answers
---
code: |
  interview_short_title = interview_metadata['civil_docketing_statement']['title']
---
id: interview_order_civil_docketing_statement
code: |
  # Set the allowed courts for this interview
  allowed_courts = interview_metadata["civil_docketing_statement"]["allowed courts"]
  nav.set_section('review_civil_docketing_statement')
  # Below sets the user_role by asking a question.
  # You can set user_role directly instead to either 'plaintiff' or 'defendant'
  # user_ask_role
  users.gather()
  attorneys.complete_attribute = 'id_number'
  attorneys.gather()
  other_parties.there_are_any = True
  plaintiffs.gather()
  defendants.gather()
  other_parties.gather()
  
  decision_maker_name
  trial_court_docket_number
  statement_of_anticipated_issues
  case_info_was_impounded
  case_info_impoundment_details
  judges.complete_attribute = 'role'
  judges.gather()
  nature_of_case
  interlocutory_appeal_reason
  order_docketing_date
  notice_of_appeal_date
  motion_for_judgment_is_filed
  motion_to_amend_is_filed
  motion_to_alter_is_filed
  motion_for_relief_from_judgment_is_filed
  other_type_of_motion_is_filed
  set_progress(10.0)
  party_proceedings_exist
  related_appeals_exist
  party_proceedings_and_related_issues
  served_other_party
  parties_to_be_served
  # Set the answer file name.
  set_parts(subtitle=str(users))
  appeals_docket_number
  set_progress(20.0)
  
  users[0].address.block()
  users[0].phone_number
  signature_date
  set_progress(40.0)
  # Save (anonymized) interview statistics.
  store_variables_snapshot(data={'zip': users[0].address.zip})
  civil_docketing_statement = True
---
comment: |
  This question is used to introduce your interview. Please customize
id: Civil Docketing Statement
continue button field: civil_docketing_statement_intro
question: |
  Civil Docketing Statement
subquestion: |
  This page will help you to fill out a Civil Docketing Statement to the Appeals Court. If you are appealing a judgment of your case, you should submit this form within 14 days of the Notice of Entry of the Appeal.
  
  It helps to have court information about your {trial court} case being appealed with you now, as you complete this form.
terms:
  trial court: |
    the court that made the decision you are appealing
  appellant: |
    The party of the trial court case who is appealing the trial court's decision
  cross-appellant: |
    The opposing party of the appellant, that has also decided to appeal the trial court's decision for different reasons than the original appeal.
  starting the appeal: |
    "within fourteen (14) days of issuance of the notice of entry of the appeal"
---
id: Are you an attorney
question: |
  Are you the attorney?
yesno: is_attorney
---
id: attorney will be on this form
generic object: PeopleList
question: |
  Do you have an attorney?
yesno: attorneys.there_are_any
---
id: "Judge's name"
question: |
  What is the name of the ${ ordinal(i) } judge?
comment: |
  % if judges.number_gathered() > 0:
  So far you have mentioned: ${ judges.comma_and_list() }
  % endif
fields:
  - First Name: judges[i].name.first
  - Last Name: judges[i].name.last
  - Suffix: judges[i].name.suffix
    required: False
    code: name_suffix()
---
comment: |
  Other options for explaining the choices include:
    * separate help page, but user would have to switch back and forth
    * terms on the choices themselves don't seem to work
    * explained in the subquestion, but the explanations might get long
id: Judge role
question: |
  What role did Judge ${ judges[i].name } play in the case?
fields:
  - no label: judges[i].role
    input type: radio
    choices:
      - Entered Judgment
      - Heard Motion
      - Reported Case or Question
      - Trial Judge
  - note:
      ${ judges[i].name } entered judgment if there was no trial. For example, they dismissed the trial, or gave a summary judgment.
    show if:
      variable: judges[i].role
      is: "Entered Judgment"
  - note:
      ${ judges[i].name } heard a motion other than a dispositive motion.
    show if: 
      variable: judges[i].role
      is: "Heard Motion"
---
id: Judges on the trial case
question: |
  Were there any judges involved in the issues that you are appealing?
yesno: judges.there_are_any
---
id: more judges
question: |
  Were any other judges involved in the issues that you are appealing?
subquestion: |
  So far, you have mentioned ${ judges.comma_and_list() }. 
yesno: judges.there_is_another
---
code: |
  # There are no judges when appealing agency or board decisions.
  if appealed_decision_maker == 'agency' or appealed_decision_maker == 'board':
    judges.there_are_any = False
---
id: Whos decision are you appealing
question: |
  Are you appealing the decision of a {trial court}, a {board}, or an {agency}?
subquestion: |
  You should only be appealing the last decision made in the case. For example, if a decision from a board or agency was heard by the superior court, and you are appealing that decision, then you are appealing the court's decision, not the boards.
terms:
  trial court: |
    This is the court that made the decision you are appealing, e.g. the District Court, Housing Court, or Probate and Family Court.
  board: |
    These are state boards, such as the [Board of Appeal](https://www.mass.gov/the-board-of-appeal), or the MassHealth Board of Hearings. 
  agency: |
    These are [state administrative agencies](https://www.mass.gov/service-details/learn-about-appeals-from-administrative-agency-decisions-under-general-laws-c30a). 
    For example, decisions from the [Department of Children and Families (DCF)](https://www.mass.gov/orgs/massachusetts-department-of-children-families), or the [Department of Transitional Assistance (DTA)](https://www.mass.gov/orgs/department-of-transitional-assistance).
fields:
  - no label: appealed_decision_maker
    code: |
        decision_makers
---
code: |
  readable_deciders = {'trial_court': 'trial court',
                       'board': 'board',
                       'agency': 'agency'}
  decision_makers = [{it[0]: it[1]} for it in readable_deciders.items()]
---
if: |
  appealed_decision_maker == 'trial_court'
question: |
  Which court made the decision that you are appealing?
fields:
  - no label: decision_maker_name
    choices:
      - Boston Municipal Court
      - District Court
      - Housing Court
      - Probate and Family Court
      - Juvenile Court
      - Land Court
      - Superior Court
      - Other
  - Specify: decision_maker_name
    maxlength: 96
    js show if: |
      val('decision_maker_name') === 'Other'
---
if: |
  appealed_decision_maker == 'agency' or appealed_decision_maker == 'board'
question: |
  Which ${ readable_deciders[appealed_decision_maker] } made the decision that you are appealing?
fields:
  - no label: decision_maker_name
    maxlength: 96
---
id: Lower Court docket number
question: |
  What was the docket number of the original case in ${ decision_maker_name }?
fields:
  - "Docket number": trial_court_docket_number
    maxlength: 96
---
id: Anything Impounded
question: |
  Is there any part of the original ${ decision_maker_name } case that is not public?
subquestion: |
  This includes any portion of the case or information in the record that is

  * impounded
  * sealed
  * deemed confidential
  * excluded from public access by statue, court order, rule, or standing order
fields: 
  - Some part of the case was impounded: case_info_was_impounded
    datatype: yesno
  - 'Which documents are not public, and for what reasons (e.g. court order, statute)?': case_info_impoundment_details
    input type: area
    maxlength: 910
    show if: case_info_was_impounded
help:
  label: |
    More Info
  content: |
    Parties filing a brief or record appendix that contains impounded materials must comply with Uniform Rule on [Impoundment Procedure Rule 12(c)](https://www.mass.gov/trial-court-rules/uniform-rules-on-impoundment-procedure-rule-12-appellate-review#-c-notice-to-the-clerk), [Supreme Judicial Court Rule 1:15 s. 2(c)](https://www.mass.gov/supreme-judicial-court-rules/supreme-judicial-court-rule-115-impoundment-procedure-in-the-supreme#section-2-maintaining-confidentiality-of-previously-impounded-material-in-cases-on-appeal), and Massachusetts Rules of Appellate Procedure [16(d)](https://www.mass.gov/rules-of-appellate-procedure/appellate-procedure-rule-16-briefs#-d-references-in-briefs-to-parties), [16(m)](https://www.mass.gov/rules-of-appellate-procedure/appellate-procedure-rule-16-briefs#-m-references-to-impounded-material), [18(a)](https://www.mass.gov/rules-of-appellate-procedure/appellate-procedure-rule-18-appendix-to-the-briefs-contents-cost#-a-duty-of-appellant-to-prepare-and-file-content-of-appendix), and [18(g)](https://www.mass.gov/rules-of-appellate-procedure/appellate-procedure-rule-18-appendix-to-the-briefs-contents-cost#-g-amendment-of-appendix).
---
code: |
  if not case_info_was_impounded:
    case_info_impoundment_details = 'N/A'
---
id: Nature of the Case
question: |
  Select the most appropriate description of the case 
fields:
  - no label: nature_of_case
    choices:
      - Abuse Prevention Order
      - Administrative Law
      - Appellate Tax Board
      - Arbitration
      - Business/Commercial
      - Child Welfare/DCF/Adoption
      - Civil Forfeiture
      - Civil Motor Vehicle Infractions
      - Civil Service
      - Contract
      - Domestic Relations/Family Law
      - Employment Law/Discrimination
      - Environmental, G. L. c.21E
      - Extreme Risk Protection Order
      - Equity
      - Government/Municipality
      - Impoundment
      - Insurance Law
      - Labor Law/Employment Relations Board
      - Land Use
      - Legal or Non-Medical Malpractice
      - Medical Malpractice
      - Mortgage/Foreclosure Law
      - "Prisoner's Rights and Claims"
      - Probate Law
      - Real Estate
      - Sex Offender Registry Board
      - Sexually Dangerous Person Proceeding
      - Tort
      - "Workers' Compensation"
      - Other
  - Specify: nature_of_case
    maxlength: 49
    js show if: |
      val("nature_of_case") === "Other"
---
id: is final_judgment
question: |
  Is the appeal from a final judgment?
subquestion: |
help:
  content: |
    This is as opposed to a temporary, or interlocutory, judgment. A final judgment disposes of all parties and claims, while an interlocutory order happens in the middle of the trial court case.
  label: |
    Specifics
yesno: is_final_judgment
---
id: Perfection of Appeal
question: |
  Why should the interlocutory order be appealed?
fields:
  - 'Basis for Appeal': interlocutory_appeal_reason
    input type: radio
    choices:
      - MA Rules of Civil Procedure (M.R.C.P.) 54(b)
      - Report
      - Present Execution
      - Other
  - 'Specify': interlocutory_appeal_reason_other
    maxlength: 32
    js show if: |
      val("interlocutory_appeal_reason") === "Other"
---
code: |
  if is_final_judgment:
    interlocutory_appeal_reason = 'N/A'
---
id: docketing_date of order
question: |
  When was the ${ "judgment" if is_final_judgment else "order" } being appealed docketed?
fields:
  - no label: order_docketing_date
    datatype: date
    max: ${ today() }
---
id: notice of appeal date
question: |
  When was the notice of the appeal filed?
fields:
  - no label: notice_of_appeal_date
    datatype: date
    # Not sure if this needs to go on the notice of appeal or not? Leaving out validation
    # max: ${ today() }
---
comment: |
  This could be a single: "Were any motions filed?", with yesnos for each, 
  just yesnos for each, or a "Were any filed?" with a "what was filed" dropdown + other, and generic for each. Going with the first for now.
id: any motions
question: |
  Were there any post-judgment motions that needed to be decided before the notice of appeal was filed?
subquestion: |
  This lets the appeals court know if the notice of appeal was filed later than expected and why. 
yesno: any_motions_filed
---
id: which timely motions
question: |
  Which of the below motions occurred?
fields:
  - 'Motion for Judgment ([Rule 50(b)](https://www.mass.gov/rules-of-civil-procedure/civil-procedure-rule-50-motion-for-a-directed-verdict-and-for-judgment#-b-motion-for-judgment-notwithstanding-the-verdict))': motion_for_judgment_is_filed
    datatype: yesnowide
  - 'When was the motion for judgment served (not filed)?': motion_for_judgment_served_date
    datatype: date
    max: ${ today() }
    show if: motion_for_judgment_is_filed
  - 'Motion to Amend or Make Additional Findings ([Rule 52(b)](https://www.mass.gov/rules-of-civil-procedure/civil-procedure-rule-52-findings-by-the-court#-b-courts-other-than-district-court-amendment))': motion_to_amend_is_filed
    datatype: yesnowide
  - 'When was it served (not filed)': motion_to_amend_served_date
    datatype: date
    max: ${ today() }
    show if: motion_to_amend_is_filed
  - 'Motion to Alter or Amend Judgment ([Rule 59](https://www.mass.gov/rules-of-civil-procedure/civil-procedure-rule-59-new-trials-amendment-of-judgments))': motion_to_alter_is_filed
    datatype: yesnowide
  - 'When was it served (not filed)?': motion_to_alter_served_date
    datatype: date
    max: ${ today() }
    show if: motion_to_alter_is_filed
  - 'Motion for Relief from Judgment ([Rule 60](https://www.mass.gov/rules-of-civil-procedure/civil-procedure-rule-60-relief-from-judgment-or-order))': motion_for_relief_from_judgment_is_filed
    datatype: yesnowide
  - 'When was it served (not filed)?': motion_for_relief_from_judgment_served_date
    datatype: date
    show if: motion_for_relief_from_judgment_is_filed
  - 'Any other post-judgment motion filed': other_type_of_motion_is_filed
    datatype: yesnowide
  - What was the other type of motion filed?: other_type_of_motion
    maxlength: 17
    show if: other_type_of_motion_is_filed
  - When was it served (not filed)?: other_type_of_motion_served_date
    datatype: date
    show if: other_type_of_motion_is_filed
---
code: |
  if not any_motions_filed:
    motion_for_judgment_is_filed = False
    motion_to_amend_is_filed = False
    motion_to_alter_is_filed = False
    motion_for_relief_from_judgment_is_filed = False
    other_type_of_motion = 'N/A'
    other_type_of_motion_is_filed = False
---
id: Appellate Issues
question: |
  Provide a short statement explaining why you are appealing
subquestion: |
  If the appellate issue involves a particular statute or regulation, please provide a citation to that statute or regulation. This is for informational purposes only; you will be able to raise other issues later, even if you do not raise them here
fields:
  - no label: statement_of_anticipated_issues
    input type: area
    maxlength: 728
---
id: Appeals with same parties
question: |
  Appeals with these parties
subquestion: |
  Are there any other appeals that involve this case or these parties (${ plaintiffs.comma_and_list()} or ${ defendants.comma_and_list()}) which have been entered in the Appeals Court or Supreme Judicial Court?
yesno: party_proceedings_exist
---
id: related issues
question: |
  Do you know of any other pending or anticipated appeals raising related issues?
yesno: related_appeals_exist
---
id: related appeals details
question: |
  Provide the case name and docket number of the related appeals and describe them below
fields:
  - no label: party_proceedings_and_related_issues
    input type: area
    maxlength: 546
---
code: |
  if not related_appeals_exist and not party_proceedings_exist:
    party_proceedings_and_related_issues = 'N/A'
---
id: method of service
question: |
  What **method of delivery** will you use to provide the required copies of the docketing statement to the other party's attorney(s)?
subquestion: |
  **You are required to provide a copy of this docketing statement to the other party's attorney(s).** 
  
  The materials should be delivered without too much delay, for example, within a day or two of this submission.
  
  If the other party does not have an attorney, you are required to serve a copy on the self-represented party.  
field: served_other_party
dropdown:
  - 'efile and serve (efilema.com)': 'efile'
  - e-mail
  - mail
  - hand delivery
---
id: parties to be served
question: |
  List the name and address or e-mail address of each attorney or self-represented party that you have served or will serve with copies of your docketing statement.
subquestion: |
  If you are serving more than one attorney or party, you may list more than one in the space provided.
fields:
  - no label: parties_to_be_served
    input type: area 
    rows: 6
---
objects:
  - civil_docketing_statement_attachment: DADict
---
attachment:
    variable name: civil_docketing_statement_attachment[i]
    name: Civil Docketing
    filename: Civil_Docketing
    skip undefined: True
    pdf template file: civil_docketing_statement.pdf
    fields: 
      - "docket_number": ${ appeals_docket_number }
      - "plaintiff": ${ plaintiffs }
      - "defendant": ${ defendants }
      - "user": ${ users }
      - "attorney": ${ attorneys }
      - "user__2": ${ users if attorneys.number_gathered() == 0 else 'N/A' }
      - "user__3": ${ users }
      # If it is a signature, test which file version we're expecting. leave it empty unless it's the final attachment version
      - "user_signature": ${ users[0].signature if i == 'final' else '' }
      - "user_address_block": ${ users[0].address.block() }
      - "signature_date": ${ signature_date }
      - "user__4": ${ users }
      - "other_party": ${ other_parties }
      - "user_phone": ${ users[0].sms_number() }
      # If it is a signature, test which file version we're expecting. leave it empty unless it's the final attachment version
      - "user_signature__1": ${ users[0].signature if i == 'final' else '' }
      - "user_address_block__1": ${ users[0].address.block() }
      - "attorney_bbo": ${ ','.join([att.id_number for att in attorneys.complete_elements()]) if attorneys.number_gathered() > 0 else 'N/A' }
      - "user_is_self_represented": ${ attorneys.number_gathered() == 0 }
      - "decision_maker_name": ${ decision_maker_name }
      - "trial_court_docket_number": ${ trial_court_docket_number }
      - "judge0": ${ judges[0].name if judges.number() > 0 else 'N/A' }
      - "judge0_role": ${ judges[0].role if judges.number() > 0 else 'N/A' }
      - "judge1": ${ judges[1].name if judges.number() > 1 else 'N/A' }
      - "judge1_role": ${ judges[1].role if judges.number() > 1 else 'N/A'}
      - "judge2_role": ${ judges[2].role if judges.number() > 2 else 'N/A'}
      - "judge2": ${ judges[2].name if judges.number() > 2 else 'N/A' }
      - "case_info_was_impounded_no": ${ not case_info_was_impounded }
      - "case_info_was_impounded_yes": ${ case_info_was_impounded }
      - "case_info_impoundment_details": ${ case_info_impoundment_details }
      - "nature_of_case": ${ nature_of_case }
      - "is_final_judgment_yes": ${ is_final_judgment }
      - "is_final_judgment_no": ${ not is_final_judgment }
      - "interlocutory_appeal_reason": ${ interlocutory_appeal_reason if not is_final_judgment else 'N/A' }
      - "order_docketing_date": ${ order_docketing_date }
      - "notice_of_appeal_date": ${ notice_of_appeal_date }
      - "motion_for_judgment_is_filed_yes": ${ motion_for_judgment_is_filed }
      - "motion_for_judgment_is_filed_no": ${ not motion_for_judgment_is_filed }
      - "motion_for_judgment_served_date": ${ motion_for_judgment_served_date if motion_for_judgment_is_filed else 'N/A' }
      - "motion_to_amend_is_filed_yes": ${ motion_to_amend_is_filed }
      - "motion_to_amend_is_filed_no": ${ not motion_to_amend_is_filed }
      - "motion_to_amend_served_date": ${ motion_to_amend_served_date if motion_to_amend_is_filed else 'N/A' }
      - "motion_to_alter_is_filed_yes": ${ motion_to_alter_is_filed }
      - "motion_to_alter_is_filed_no": ${ not motion_to_alter_is_filed }
      - "motion_to_alter_served_date": ${ motion_to_alter_served_date if motion_to_alter_is_filed else 'N/A' }
      - "motion_for_relief_from_judgment_is_filed_yes": ${ motion_for_relief_from_judgment_is_filed }
      - "motion_for_relief_from_judgment_is_filed_no": ${ not motion_for_relief_from_judgment_is_filed }
      - "motion_for_relief_from_judgment_served_date": ${ motion_for_relief_from_judgment_served_date if motion_for_relief_from_judgment_is_filed else 'N/A' }
      - "other_type_of_motion_is_filed_yes": ${ other_type_of_motion_is_filed }
      - "other_type_of_motion_is_filed_no": ${ not other_type_of_motion_is_filed }
      - "other_type_of_motion": ${ other_type_of_motion if other_type_of_motion_is_filed else 'N/A' }
      - "other_type_of_motion_served_date": ${ other_type_of_motion_served_date if other_type_of_motion_is_filed else 'N/A'}
      - "statement_of_anticipated_issues": ${ statement_of_anticipated_issues }
      - "party_proceedings_exist_yes": ${ party_proceedings_exist }
      - "party_proceedings_exist_no": ${ not party_proceedings_exist }
      - "related_appeals_exist_yes": ${ related_appeals_exist }
      - "related_appeals_exist_no": ${ not related_appeals_exist }
      - "party_proceedings_and_related_issues": ${ party_proceedings_and_related_issues }
      - "attorney_bbo__1": ${ ','.join([att.id_number for att in attorneys.complete_elements()]) if attorneys.number_gathered() > 0 else 'N/A' }
      - "have_served_other_party_hand_delivery": ${ served_other_party == 'hand delivery' }
      - "have_served_other_party_first_class_mail": ${ served_other_party == 'first class mail' }
      - "have_served_other_party_email": ${ served_other_party == 'e-mail' or served_other_party == 'efile' }
      - "parties_to_be_served": ${ parties_to_be_served }
---
field: judge.revisit
question: |
  Edit the judges
subquestion: |
  ${ judges.table }
  
  ${ judges.add_action() }
---
id: civil_docketing_statement review screen
event: review_civil_docketing_statement
question: |
  Answer Review Screen
subquestion: |
  Edit your answers below
review:
  - Edit: plaintiffs
    button: |
      **plaintiffs**:
      ${ plaintiffs }
  - Edit: defendants
    button: |
      **defendants**:
      ${ defendants }
  - Edit: users
    button: |
      **users**:
      ${ users }
  - Edit: other_parties
    button: |
      **other_parties**:
      ${ other_parties }
  - Edit: attorneys.revisit
    button: |
      **Attorneys**:
      
      % for att in attorneys:
      * ${ att }, *BBO*: ${ att.id_number}
      %endfor
  - Edit: judges.revisit
    button: |
      **Judges**:
      
      % for jud in judges:
      * ${ jud } (${ jud.role})
      %endfor
  - label: Edit
    fields:
      - appealed_decision_maker
      - recompute:
        - decision_maker_name
    button: |
      **${ decision_makers[appealed_decision_maker] } name**:
      ${ decision_maker_name }
  - Edit: trial_court_docket_number
    button: |
      **Original Case Docket Number**:
      ${ trial_court_docket_number }
  - label: Edit
    fields:
      - case_info_was_impounded
      - recompute:
        - case_info_impoundment_details
    button: |
      % if case_info_was_impounded:
      **Impounded documents and authority for impoundment**:
      > ${ single_paragraph(case_info_impoundment_details) }
      % else:
      No documents were impounded in the trial court.
      % endif
  - Edit: nature_of_case
    button: |
      **Nature of case**:
      ${ nature_of_case }
  - label: Edit
    fields:
      - is_final_judgment
      - recompute:
        - interlocutory_appeal_reason
    button: |
      % if not is_final_judgment:
      **Interlocutory Order is appealable because**:
      > ${ interlocutory_appeal_reason }
      % else:
      Appeal is from final Judgment.
      % endif
  - Edit: order_docketing_date
    button: |
      **Docketing date of Order appealed**:
      ${ order_docketing_date.format() }
  - Edit: notice_of_appeal_date
    button: |
      **Date notice of appeal was filed**:
      ${ notice_of_appeal_date.format() }
  - label: Edit
    fields:
      - motion_for_judgment_is_filed
      - recompute:
        - motion_for_judgment_served_date
    button: |
      % if motion_for_judgment_is_filed:
      **Motion for Judgment served on**:
      ${ motion_for_judgment_served_date.format() }
      % else:
      No motion for Judgment filed
      % endif
  - label: Edit
    fields:
      - motion_to_amend_is_filed
      - recompute: 
        - motion_to_amend_served_date
    button: |
      % if motion_to_amend_is_filed:
      **Motion to Amend or Make Additional Findings served on**:
      ${ motion_to_amend_served_date.format() }
      % else:
      No motion to amend or make additional findings filed
      % endif
  - label: Edit
    fields:
      - motion_to_alter_is_filed
      - recompute: 
        - motion_to_alter_served_date
    button: |
      % if motion_to_alter_is_filed:
      **Motion to Alter or Amend Judgment served on**:
      ${ motion_to_alter_served_date.format() }
      % else:
      No motion for relief from judgment filed
      % endif
  - label: Edit
    fields:
      - motion_for_relief_from_judgment_is_filed
      - recompute:
        - motion_for_relief_from_judgment_served_date
    button: |
      % if motion_for_relief_from_judgment_is_filed:
      **Motion for Relief from Judgment served on**:
      ${ motion_for_relief_from_judgment_served_date.format() }
      % else:
      No motion for relief from judgment filed
      % endif
  - label: Edit
    fields:
      - other_type_of_motion_is_filed
      - recompute:
        - other_type_of_motion
        - other_type_of_motion_served_date
    button: |
      % if other_type_of_motion_is_filed:
      **${ other_type_of_motion } served on**:
      ${ other_type_of_motion_served_date.format() }
      % else:
      No other motions passed
      % endif
  - Edit: statement_of_anticipated_issues
    button: |
      **anticipated issues on appeal**:
      > ${ single_paragraph(statement_of_anticipated_issues) }
  - Edit: party_proceedings_exist
    button: |
      **appeals that involve these parties**:
      ${ word(yesno(party_proceedings_exist)) }
  - Edit: related_appeals_exist
    button: |
      **appeals raising related issues**:
      ${ word(yesno(related_appeals_exist)) }
  - Edit: party_proceedings_and_related_issues
    button: |
      **related appeals or issues**:
      ${ party_proceedings_and_related_issues }
  - Edit: served_other_party
    button: |
      I made service directly to the self-represented party
      ${ served_other_party }
  - Edit: appeals_docket_number
    button: |
      **appeals_docket_number**:
      ${ appeals_docket_number }
  - Edit: users[0].signature
    button: |
      **${ users[0] } signature**:
      ${ users[0].signature }
  - Edit: users[0].address.address
    button: |
      **${ users[0] } address**:
      ${ users[0].address.address }
  - Edit: signature_date
    button: |
      **signature_date**:
      ${ signature_date }
  - Edit: users[0].phone_number
    button: |
      **${ users[0] } phone number**:
      ${ users[0].phone_number }